# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps
name: .NET 7 AVRO Fusion Generator

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    name: Build ${{ matrix.configuration }}
    strategy:
      matrix:
        configuration: [Release]

    runs-on: ubuntu-latest

    env:
      Solution_Name: AvroFusionGenerator.sln
      Project_Name: AvroFusionGenerator
      Project_Directory: AvroFusionSource/AvroFusionGenerator


    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET 7 SDK
    - name: Install .NET 7 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Install jq
      run: sudo apt-get install jq

    - name: Increment version suffix
      run: |
        echo "VersionSuffix=$(date +%y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore
      shell: bash

    - name: Build the solution
      run: dotnet build $Solution_Name --configuration $Configuration
      env:
        Configuration: ${{ matrix.configuration }}
      shell: bash


    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet msbuild ${{ env.Project_Directory }}/${{ env.Project_Name }}.csproj /p:Configuration=${{ matrix.configuration }} /t:Publish
      shell: bash
    
    - name: Create NuGet package
      run: dotnet pack --configuration Release
      working-directory: AvroFusionSource/AvroFusionGenerator

    - name: List NuGet package file
      run: ls -R AvroFusionSource/AvroFusionGenerator/nupkg/


    - name: Publish NuGet package
      uses: actions/upload-artifact@v2
      with:
        name: NuGetPackage
        path: AvroFusionSource/AvroFusionGenerator/nupkg/*.nupkg
        if-no-files-found: warn

    - name: Create GITHUB_OUTPUT file
      run: |
        echo "GITHUB_OUTPUT=${{ runner.temp }}/github_output.env" >> $GITHUB_ENV

    - name: Get latest commit short hash
      run: echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Get total number of commits on main branch
      run: echo "commit_count=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

    - name: Use output values
      run: |
        source <(cat $GITHUB_OUTPUT)
        build_number=$(($commit_count + 1))
        release_number="1.0.$build_number"
        echo "Build number: $build_number"
        echo "Release number: $release_number"
      shell: bash
      
    
    - name: Create Git tag
      run: |
       git config --local user.email "action@github.com"
       git config --local user.name "GitHub Action"
       git tag "v${release_number}-b${build_number}-g${short_hash}-r${{ github.run_id }}-d${current_date_time}"
       git push https://${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git --tags
      shell: bash


    - name: Set version number output
      run: echo "version_number=1.0.0" >> $GITHUB_OUTPUT

    - name: Set release number output
      run: echo "release_number=100" >> $GITHUB_OUTPUT

    - name: Use version and release numbers
      run: |
        source <(cat $GITHUB_OUTPUT)
        echo "The version number is: $version_number"
        echo "The release number is: $release_number"
      shell: bash





