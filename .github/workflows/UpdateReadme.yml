name: Update Avro Fusion Generator Readme

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
 job1:
    name: Get and set Nuget Package Path
    runs-on: ubuntu-latest
    steps:
      - name: Set NuGet package path as environment variable
        run: echo "PACKAGE_PATH=AvroFusionSource/AvroFusionGenerator/nupkg/" >> $GITHUB_ENV

      - name: Display NuGet package path
        run: |
            echo "NuGet Package Path: ${{ env.PACKAGE_NAME }}"
 job2:
   name: Update Readme with the Nugetpackage Id 
   runs-on: ubuntu-latest
   needs: job1
   strategy:
      matrix:
        configuration: [Release]
   
   env:
      Solution_Name: AvroFusionGenerator.sln
      Project_Name: AvroFusionGeneratorReadMeUpdater
      Project_Directory: AvroFusionSource/AvroFusionGeneratorReadMeUpdater
      NUGET_PACKAGE_PATH: AvroFusionSource/AvroFusionGenerator/nupkg/
      TARGET_REPO: 'dineshtripathi/AvroFusionSchemaGenerator'
      TARGET_WORKFLOW_NAME: '.NET 7 AVRO Fusion Generator'
      Pipeline_Token: ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}
      GITHUB_WORKSPACE: ${{ github.workspace }}

   steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Install .NET 7 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'

    - name: Install jq
      run: sudo apt-get install jq

    - name: Restore dependencies
      run: dotnet restore
      shell: bash

    - name: Build the solution
      run: dotnet build $Solution_Name --configuration $Configuration
      env:
        Configuration: ${{ matrix.configuration }}
      shell: bash

    - name: Print build output directory contents
      run: ls -l ${{ env.Project_Directory }}/bin/${{ matrix.configuration }}/net7.0/
      shell: bash

    - name: Get target workflow ID
      run: |
       workflow_data=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/workflows")
       target_workflow_id=$(echo "$workflow_data" | jq --arg target_wf_name "$TARGET_WORKFLOW_NAME" '.workflows[] | select(.name==$target_wf_name) | .id')
       echo "TARGET_WORKFLOW_ID=$target_workflow_id" >> $GITHUB_ENV

    - name: Get last successful run ID
      run: |
       last_successful_run_id=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/workflows/$TARGET_WORKFLOW_ID/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')
       echo "LAST_SUCCESSFUL_RUN_ID=$last_successful_run_id" >> $GITHUB_ENV

    - name: Download artifact from the last successful run
      run: |
       artifact_url=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/runs/$LAST_SUCCESSFUL_RUN_ID/artifacts" | jq -r '.artifacts[] | select(.name=="NuGetPackage") | .archive_download_url')
       curl -L -o artifact.zip -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "$artifact_url"
       unzip_output=$(unzip -Z1 artifact.zip)
       package_name=$(echo "$unzip_output" | grep -Eo '^[^.]+' | head -1)
       package_version=$(echo "$unzip_output" | grep -Eo '\d+\.\d+\.\d+(-[^.]+)?' | head -1)
       release_number=$(echo "$package_version" | sed 's/.*beta//')
       echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
       echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV
       echo "RELEASE_NUMBER=$release_number" >> $GITHUB_ENV



    #- name: Get package information
    #  run: |
    #   package_name=$(jq -r '.packageName' artifact_data.json)
    #   package_version=$(jq -r '.packageVersion' artifact_data.json)
    #   release_number=$(jq -r '.releaseNumber' artifact_data.json)
    #   echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
    #   echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV
    #   echo "RELEASE_NUMBER=$release_number" >> $GITHUB_ENV


    - name: Run the executable and update Update README.md
      working-directory: AvroFusionSource/AvroFusionGeneratorReadMeUpdater/bin/${{ matrix.configuration }}/net7.0
      env:
       BUILD_TAGGING_ACCESS_TOKEN: ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}
      run: |
       chmod +x AvroFusionGeneratorReadMeUpdater
       ls -l
       ./AvroFusionGeneratorReadMeUpdater
      shell: bash

    - name: Commit updated README.md
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README.md"
        git push
