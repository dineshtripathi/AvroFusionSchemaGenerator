name: Update Avro Fusion Generator Readme

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
 job1:
    name: Get and set Nuget Package Path
    runs-on: ubuntu-latest
    steps:
      - name: Set NuGet package path as environment variable
        run: echo "PACKAGE_PATH=AvroFusionSource/AvroFusionGenerator/nupkg/" >> $GITHUB_ENV

      - name: Display NuGet package path
        run: |
            echo "NuGet Package Path: ${{ env.PACKAGE_NAME }}"
 job2:
   name: Update Readme with the Nugetpackage Id 
   runs-on: ubuntu-latest
   needs: job1
   strategy:
      matrix:
        configuration: [Release]
   
   env:
      Solution_Name: AvroFusionGenerator.sln
      Project_Name: AvroFusionGeneratorReadMeUpdater
      Project_Directory: AvroFusionSource/AvroFusionGeneratorReadMeUpdater
      NUGET_PACKAGE_PATH: AvroFusionSource/AvroFusionGenerator/nupkg/
      TARGET_REPO: 'dineshtripathi/AvroFusionSchemaGenerator'
      TARGET_WORKFLOW_NAME: '.NET 7 AVRO Fusion Generator'
      Pipeline_Token: ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}
      GITHUB_WORKSPACE: ${{ github.workspace }}
      BUILD_TAGGING_ACCESS_TOKEN: ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}

   steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Install .NET 7 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'

    - name: Install jq
      run: sudo apt-get install jq

    - name: Restore dependencies
      run: dotnet restore
      shell: bash

    - name: Build the solution
      run: dotnet build $Solution_Name --configuration $Configuration
      env:
        Configuration: ${{ matrix.configuration }}
      shell: bash

    - name: Print build output directory contents
      run: ls -l ${{ env.Project_Directory }}/bin/${{ matrix.configuration }}/net7.0/
      shell: bash

    - name: Get target workflow ID
      run: |
       workflow_data=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/workflows")
       target_workflow_id=$(echo "$workflow_data" | jq --arg target_wf_name "$TARGET_WORKFLOW_NAME" '.workflows[] | select(.name==$target_wf_name) | .id')
       echo "TARGET_WORKFLOW_ID=$target_workflow_id" >> $GITHUB_ENV

    - name: Get last successful run ID
      run: |
       last_successful_run_id=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/workflows/$TARGET_WORKFLOW_ID/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')
       echo "LAST_SUCCESSFUL_RUN_ID=$last_successful_run_id" >> $GITHUB_ENV
      shell: bash


    - name: Get last successful run ID
      run: |
        last_successful_run=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/workflows/$TARGET_WORKFLOW_ID/runs?status=success&per_page=1")
        last_successful_run_id=$(echo "$last_successful_run" | jq '.workflow_runs[0].id')
        last_successful_run_suite_id=$(echo "$last_successful_run" | jq '.workflow_runs[0].check_suite_id')
        echo "LAST_SUCCESSFUL_RUN_ID=$last_successful_run_id" >> $GITHUB_ENV
        echo "LAST_SUCCESSFUL_RUN_SUITE_ID=$last_successful_run_suite_id" >> $GITHUB_ENV


    - name: Download artifact from the last successful run
      run: |
        api_response=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/runs/$LAST_SUCCESSFUL_RUN_ID/artifacts")
        artifact_id=$(echo "$api_response" | jq -r '.artifacts[] | select(.name=="NuGetPackage") | .id')
        echo "Download Artifact Id :$artifact_id"
        echo "Download LAST_SUCCESSFUL_RUN_SUITE_ID : $LAST_SUCCESSFUL_RUN_SUITE_ID"
        artifact_url="https://github.com/${TARGET_REPO}/suites/${LAST_SUCCESSFUL_RUN_SUITE_ID}/artifacts/${artifact_id}"
        echo "Artifact URL: $artifact_url"
        echo "PACKAGE_URL=$artifact_url" >> $GITHUB_ENV
        api_response=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "https://api.github.com/repos/$TARGET_REPO/actions/runs/$LAST_SUCCESSFUL_RUN_ID/artifacts")
        echo "API Response: $api_response"
        artifact_url=$(echo "$api_response" | jq -r '.artifacts[] | select(.name=="NuGetPackage") | .archive_download_url')
        echo "Artifact URL: $artifact_url"
        curl -L -o artifact.zip -H "Authorization: token ${{ secrets.BUILD_TAGGING_ACCESS_TOKEN }}" "$artifact_url"
        unzip_output=$(unzip -Z1 artifact.zip)
        echo  "Unzip Output :$unzip_output"
        echo "$unzip_output" | grep -Eo '^[^\.]+'
        package_name=$(echo "$unzip_output" | grep -Eo '^[^\.]+')
        echo "Full Version String: $package_name"
        package_version=$(echo "$unzip_output" | grep -Eo '^[^.]+\.([0-9]+\.)+[0-9]+' | sed 's/.$//')
        echo "Package Version: $package_version"
        release_number=$(echo "$unzip_output" | grep -Eo '\-[0-9]{12}\.' | sed 's/-//' | sed 's/\.$//')
        echo "Release Number: $release_number"
        #echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
        #echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV
        #echo "RELEASE_NUMBER=$release_number" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$unzip_output" >> $GITHUB_ENV
        echo "PACKAGE_VERSION=1.0.0" >> $GITHUB_ENV
        echo "RELEASE_NUMBER=beta333333" >> $GITHUB_ENV
        echo "PACKAGE_URL=$artifact_url" >>$GITHUB_ENV


    #- name: Run the executable and update Update README.md
    #  working-directory: AvroFusionSource/AvroFusionGeneratorReadMeUpdater/bin/${{ matrix.configuration }}/net7.0
    #  run: |
    #   chmod +x AvroFusionGeneratorReadMeUpdater
    #   ls -l
    #   ./AvroFusionGeneratorReadMeUpdater > output.txt
    #  shell: bash

    - name: Run .NET Console App
      id: run_app
      run: |
        OUTPUT=$(dotnet run --project AvroFusionSource/AvroFusionGeneratorReadMeUpdater/AvroFusionGeneratorReadMeUpdater.csproj)
        echo "::set-output name=console_output::$OUTPUT"

    - name: Use captured output
      run: |
          echo "Captured output from .NET console app: ${{ steps.run_app.outputs.console_output }}"

    - name: Set output variable
      id: output
      run: echo "::set-output name=console_output::$(cat output.txt)"
      shell: bash

    - name: Use output variable
      run: |
       echo "Console output: ${{ steps.output.outputs.console_output }}"
      shell: bash

    - name: Commit updated README.md
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README.md"
        git push
